#!/usr/bin/env python 
import re as regular #avoid the double definition of real part of sympy 
from RGEsDefinition import *
from ModelsClass import	Model,loggingInfo,loggingDebug,loggingCritical
from RGEsmathModule import SimplifyTraces
from Yukawas import *
from QuarticCouplings import *
from GaugeCouplings import *
from ScalarMass import *
from FermionMass import *
from Trilinear import *
def Translate(RGE, model, RunSettings):
	"""Do the translation for a given RGE in a general g group into a product of semi simple groups."""
	#One or two loop rge
	LocalRGE = RGEsDefinitions[RGE]['I'] + RGEsDefinitions[RGE]['II'] if RunSettings['Two-Loop'] else  RGEsDefinitions[RGE]['I']
	#replace kappa by 1/2 if weyl one otherwise
	LocalRGE = LocalRGE.subs(kappa,Rational(1,2)) if RunSettings['Weyl'] else LocalRGE.subs(kappa,1)
	#Separate the different order and store them in Translated
	Translated = {}
	#Check if it is gauge couplings beta functions
	if RGE == 'Gauge-Couplings':
		set_globals(model)
		for idx,x in enumerate(model.GaugeGroups):
			loggingInfo('\t\tGauge-Couplings calculation, Group {} ...'.format(x[0]),verbose=RunSettings['vInfo'])
			#x contains the name and the instance of the Group
			Translated[x[0]] = LocalRGE.expand()
			#separation or the different powers, note the power 0 of g is obtained by putting it to zero
			Translated[x[0]] = [Translated[x[0]].coeff(g**2),Translated[x[0]].coeff(g**3),Translated[x[0]].coeff(x[1].g**4),Translated[x[0]].coeff(g**5)]
			#elimination of the powers that do not appear above
			Translated[x[0]] = [[elt*x[1].g**(ilt+2),ilt+2] for ilt,elt in enumerate(Translated[x[0]]) if elt != 0]
			#Loop over the power of g and apply the translation rules
			for ipow,powe in 	enumerate(Translated[x[0]]):
				if powe[1] == 3 :
					#Eq. 106
					Translated[x[0]][ipow][0] = ApplyEq106(powe,model,x)
					loggingInfo('\t\t\t Applying Eq. 106...done',verbose=RunSettings['vInfo']) 
					#Eq. 107
					Translated[x[0]][ipow][0] = ApplyEq107(powe,model,x)
					loggingInfo('\t\t\t Applying Eq. 107...done',verbose=RunSettings['vInfo']) 
					#doing the calculation
					Translated[x[0]][ipow][0] = Translated[x[0]][ipow][0].doit()
				if powe[1] == 5 : 
				#	#Eq. 108
					Translated[x[0]][ipow][0] = ApplyEq108(powe,model,x)
					loggingInfo('\t\t\t Applying Eq. 108...done',verbose=RunSettings['vInfo']) 
					#Eq. 109
					Translated[x[0]][ipow][0] = ApplyEq109(powe,model,x)
					loggingInfo('\t\t\t Applying Eq. 109...done',verbose=RunSettings['vInfo']) 
					#Eq. 110
					Translated[x[0]][ipow][0] = ApplyEq110(powe,model,x)
					loggingInfo('\t\t\t Applying Eq. 110...done',verbose=RunSettings['vInfo']) 
					Translated[x[0]][ipow][0] = Translated[x[0]][ipow][0].doit()
				if powe[1] == 3 and RunSettings['Two-Loop']:
					#The last step is to calculate the yukawa part 
					Translated[x[0]][ipow][0] = Y4F(powe,model,x)
					loggingInfo('\t\t\t Calculating the Y4(F) term...done',verbose=RunSettings['vInfo'])
					Translated[x[0]][ipow][0] = Translated[x[0]][ipow][0].doit()
			Translated[x[0]] = CompileGaugeCouplings(model,Translated,x[0],RunSettings['Weyl'])
		loggingInfo("\t\t...Gauge-Couplings calculation done.",verbose=RunSettings['vInfo'])
	elif RGE == 'Quartic-Couplings' :
		set_globalsLbd(model)
		#We loop over the contributions to Calculate and apply the transformation rules
		#Loop over the quartic terms
		if model.LbdToCalculate == {} : 
			loggingCritical("WARNING, no Quartic term defined in the lagrangian",verbose=RunSettings['vCritical'])
		else :
			for lbd,listlbd in model.LbdToCalculate.items():
				#we need only one term to calculate the evolution of each lambda let's take the first one in the list
				loggingInfo('\t\tQuartic-Couplings calculation, for parameter {}...\n'.format(lbd),verbose=RunSettings['vInfo'])
				Translated[lbd] = LocalRGE.expand()
				#separation of the different powers of g 
				Translated[lbd] = [Translated[lbd].subs(g,0),Translated[lbd].coeff(g),Translated[lbd].coeff(g**2),Translated[lbd].coeff(g**3),Translated[lbd].coeff(g**4),Translated[lbd].coeff(g**5),Translated[lbd].coeff(g**6)]
				#elimination of the component that are equals to zero 
				Translated[lbd] = [[elt,ilt] for ilt,elt in enumerate(Translated[lbd]) if elt != 0]
				######################################
				comb = listlbd[-1]#select the particles
				######################################
				for ipow,powe in enumerate(Translated[lbd]):
					if powe[1] == 0 :
						Translated[lbd][ipow][0] = CLYabcd(powe,comb,model)
						loggingInfo("\t\t\t Calculating the Y2(k) terms for k in a,b,c,d ...done",verbose=RunSettings['vInfo'])
						loggingInfo("\t\t\t Calculating the L2abcd term...",verbose=RunSettings['vInfo'])
						Translated[lbd][ipow][0] = CL2abcd(powe,comb,model)
						loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
						loggingInfo("\t\t\t Calculating the Habcd terms ...",verbose=RunSettings['vInfo'])
						Translated[lbd][ipow][0] = CHabcd(powe,comb,model)
						loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
						if RunSettings['Two-Loop'] :
							loggingInfo("\t\t\t Calculating the L2labcd terms ...",verbose=RunSettings['vInfo'])
							Translated[lbd][ipow][0] = CL2labcd(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the Lbar3abcd terms ...",verbose=RunSettings['vInfo'])
							Translated[lbd][ipow][0] = CLbar3abcd(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the Lbar2Yabcd terms ...",verbose=RunSettings['vInfo'])
							Translated[lbd][ipow][0] = CLbar2Yabcd(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the Hbarlabcd terms ...",verbose=RunSettings['vInfo'])
							Translated[lbd][ipow][0] = CHbarlabcd(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the Hbar2labcd terms ...",verbose=RunSettings['vInfo'])
							Translated[lbd][ipow][0] = CHbar2labcd(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the H2labcd terms ...",verbose=RunSettings['vInfo'])
							Translated[lbd][ipow][0] = CH2labcd(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the HYabcd, HbarYabcd and H3abcd terms ...",verbose=RunSettings['vInfo'])
							Translated[lbd][ipow][0] = CHYabcdHbarYabcdH3abcd(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
					if powe[1] == 2 :
						Translated[lbd][ipow][0] = CLSabcd(powe,comb,model) 
						loggingInfo('\t\t\t Calculating LSabcd term...done',verbose=RunSettings['vInfo'])
						if RunSettings['Two-Loop'] : 
							loggingInfo("\t\t\t Calculating the Lbar2Sabcd terms ...",verbose=RunSettings['vInfo'])
							Translated[lbd][ipow][0] = CLbar2Sabcd(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the L2gabcd terms ...",verbose=RunSettings['vInfo'])
							Translated[lbd][ipow][0] = CL2gabcd(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the Y2Flabcd terms ...",verbose=RunSettings['vInfo'])
							Translated[lbd][ipow][0] =CY2Flabcd(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the HSabcd terms ...",verbose=RunSettings['vInfo'])
							Translated[lbd][ipow][0] = CHSabcd(powe,comb,model)
							loggingInfo("\t\t\t\t\t ...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the HFabcd terms ...",verbose=RunSettings['vInfo'])
							Translated[lbd][ipow][0] = CHFabcd(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
					if powe[1] == 4 :
						#Apply Eq 120
						loggingInfo('\t\t\t Calculating Aabcd...',verbose=RunSettings['vInfo'])
						Translated[lbd][ipow][0] = CAabcd(powe,comb,model) 
						loggingInfo('\t\t\t\t\t...done',verbose=RunSettings['vInfo'])
						if RunSettings['Two-Loop']:
							loggingInfo('\t\t\t Calculating g4LSabcd term ...',verbose=RunSettings['vInfo'])
							Translated[lbd][ipow][0] = Cg4LSabcd(powe,comb,model) 
							loggingInfo('\t\t\t\t\t ...done',verbose=RunSettings['vInfo'])
							loggingInfo('\t\t\t Calculating LSSabcd term ...',verbose=RunSettings['vInfo'])
							Translated[lbd][ipow][0] = CLSSabcd(powe,comb,model) 
							loggingInfo('\t\t\t\t\t ...done',verbose=RunSettings['vInfo'])
							loggingInfo('\t\t\t Calculating Alabcd term ...',verbose=RunSettings['vInfo'])
							Translated[lbd][ipow][0] = CAlabcd(powe,comb,model) 
							loggingInfo('\t\t\t\t\t ...done',verbose=RunSettings['vInfo'])
							loggingInfo('\t\t\t Calculating Abarlabcd...\n',verbose=RunSettings['vInfo'])
							Translated[lbd][ipow][0] = CAbarlabcd(powe,comb,model) 
							loggingInfo('\t\t\t\t\t ...done\n',verbose=RunSettings['vInfo'])
							loggingInfo('\t\t\t Calculating BYabcd and BbarYabcd...',verbose=RunSettings['vInfo'])
							Translated[lbd][ipow][0] = CBYabcdBbarYabcd(powe,comb,model)
							loggingInfo('\t\t\t\t\t ...done\n',verbose=RunSettings['vInfo'])
					if powe[1] == 6 :
						assert RunSettings['Two-Loop']
						loggingInfo('\t\t\t Calculating CtAabcd term ...',verbose=RunSettings['vInfo'])
						Translated[lbd][ipow][0] = CtAabcd(powe,comb,model) 
						loggingInfo('\t\t\t\t\t...done',verbose=RunSettings['vInfo'])
						loggingInfo('\t\t\t Calculating CASabcd term ...',verbose=RunSettings['vInfo'])
						Translated[lbd][ipow][0] = CASabcd(powe,comb,model) 
						loggingInfo('\t\t\t\t\t...done',verbose=RunSettings['vInfo'])
						loggingInfo('\t\t\t Calculating CAgabcd term ...',verbose=RunSettings['vInfo'])
						Translated[lbd][ipow][0] = CAgabcd(powe,comb,model) 
						loggingInfo('\t\t\t\t\t...done',verbose=RunSettings['vInfo'])
						#Replace the Lambda by the lagrangian parameter
				Translated[lbd] = CompileQuartic(Translated,lbd,comb,model,RunSettings['Weyl'])
	elif RGE == 'Yukawas' :
		set_globalsYuk(model)
		if model.YukToCalculate == {} :
			loggingCritical("WARNING, no Yukawa term defined in the lagrangian",verbose=RunSettings['vCritical'])
		else :
			for y,valy in model.Potential['Yukawas'].items():
				loggingInfo("\t\tParameter {}...".format(y),verbose=RunSettings['vInfo'])
				Translated[y] = LocalRGE.expand()
				#separation of the different powers of g 
				Translated[y] = [Translated[y].subs(g,0),Translated[y].coeff(g),Translated[y].coeff(g**2),Translated[y].coeff(g**3),Translated[y].coeff(g**4),Translated[y].coeff(g**5),Translated[y].coeff(g**6)]
				#elimination of the component that are equals to zero 
				Translated[y] = [[elt,ilt] for ilt,elt in enumerate(Translated[y]) if elt != 0]
				#####################################################################
				comb = model.YukToCalculate[y][-1]
				sc = [(iel,el) for iel,el in enumerate(comb) if str(el[0]) in model.Scalars]
				assert len(sc) == 1
				comb = [el for iel,el in enumerate(comb) if iel != sc[0][0]]
				comb.insert(0,sc[0][1])
				#####################################################################
				for ipow,powe in enumerate(Translated[y]):
				#Apply Eq 111
					if powe[1] == 0 : 
						loggingInfo('\t\t\t Calculating the term independent of the gauge coupling in the yukawa 1-loop...',verbose=RunSettings['vInfo'])
						Translated[y][ipow][0] = CYuk(powe,comb,model)
						loggingInfo('\t\t\t\t\t...done',verbose=RunSettings['vInfo'])
						if RunSettings['Two-Loop'] :
							loggingInfo('\t\t\t Calculating the term independent of the gauge coupling in the yukawa 2-loop...',verbose=RunSettings['vInfo'])
							Translated[y][ipow][0] = CYukII(powe,comb,model)
							loggingInfo('\t\t\t\t\t...done',verbose=RunSettings['vInfo'])
					if powe[1] == 2 :
						Translated[y][ipow][0] = CYukGauge(powe,comb,model)
						loggingInfo('\t\t\t Calculating the term {C2(F),Ya}...done',verbose=RunSettings['vInfo'])
						if RunSettings['Two-Loop'] :
							loggingInfo('\t\t\t Calculating the term proportional to g^2...',verbose=RunSettings['vInfo'])
							Translated[y][ipow][0] = CYukGaugeIIg2(powe,comb,model)
							loggingInfo('\t\t\t\t\t...done',verbose=RunSettings['vInfo'])
					if powe[1] == 4 :
						loggingInfo('\t\t\t Calculating the term proportional to g^4',verbose=RunSettings['vInfo'])
						Translated[y][ipow][0] = CYukGaugeIIg4(powe,comb,model)
						loggingInfo('\t\t\t\t\t...done',verbose=RunSettings['vInfo'])
				Translated[y] = CompileYukawas(Translated,y,comb,model,RunSettings['Weyl'])
				loggingInfo('\t\t Compiling the results for the Yukawa...done',verbose=RunSettings['vInfo'])
	elif RGE == 'ScalarMass':
		set_globalsScM(model)
		if model.ScMToCalculate == {} :
			loggingCritical("WARNING, no Scalar mass term defined in the lagrangian",verbose=RunSettings['vCritical'])
		else :
			for mqt,listmab in model.ScMToCalculate.items() :
				#########################################
				#Only one term needed to calculate the evolution lets take the first one The others could be used for implementing some checks
				comb = model.ScMToCalculate[mqt][-1]
				#########################################	
				loggingInfo('\t\tScalar mass calculation, for parameter {}...\n'.format(mqt),verbose=RunSettings['vInfo'])
				Translated[mqt] = LocalRGE.expand()
				#separation of the different powers of g 
				Translated[mqt] = [Translated[mqt].subs(g,0),Translated[mqt].coeff(g),Translated[mqt].coeff(g**2),Translated[mqt].coeff(g**3),Translated[mqt].coeff(g**4),Translated[mqt].coeff(g**5),Translated[mqt].coeff(g**6)]
				#elimination of the component that are equals to zero 
				Translated[mqt] = [[elt,ilt] for ilt,elt in enumerate(Translated[mqt]) if elt != 0]
				for ipow,powe in enumerate(Translated[mqt]):
					if powe[1] == 0 :
						Translated[mqt][ipow][0] = Cmeflabef(powe,comb,model)
						loggingInfo("\t\t\tCalculating the mef^2 term...done",verbose=RunSettings['vInfo'])
						Translated[mqt][ipow][0] = Chaefhbef(powe,comb,model)
						loggingInfo("\t\t\tCalculating the haefhbef term...done",verbose=RunSettings['vInfo'])
						Translated[mqt][ipow][0] = CLYab(powe,comb,model)
						loggingInfo("\t\t\tCalculating the LYab term...done",verbose=RunSettings['vInfo'])
						loggingInfo("\t\t\tCalculating the Hab term...",verbose=RunSettings['vInfo'])
						Translated[mqt][ipow][0] = CHab(powe,comb,model)
						loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
						if RunSettings['Two-Loop'] :
							Translated[mqt][ipow][0] = CL2mab(powe,comb,model)
							loggingInfo("\t\t\tCalculating the L2mab term...done",verbose=RunSettings['vInfo'])
							Translated[mqt][ipow][0] = CLbar3ab(powe,comb,model)
							loggingInfo("\t\t\tCalculating the Lbar3ab term...done",verbose=RunSettings['vInfo'])
							Translated[mqt][ipow][0] = CLbar2Yab(powe,comb,model)
							loggingInfo("\t\t\tCalculating the Lbar2Yab term...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\tCalculating the Hbarlab term...",verbose=RunSettings['vInfo'])
							Translated[mqt][ipow][0] = CHbarlab(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							Translated[mqt][ipow][0] = CH2mab(powe,comb,model)
							loggingInfo("\t\t\tCalculating the H2ab term...done",verbose=RunSettings['vInfo'])
							Translated[mqt][ipow][0] = CHbar2mab(powe,comb,model)
							loggingInfo("\t\t\tCalculating the Hbar2ab term...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\tCalculating the HYab,HYbarab, H3ab term...",verbose=RunSettings['vInfo'])
							Translated[mqt][ipow][0] = CHYabHbarYabH3ab(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
					if powe[1] == 2 :
						Translated[mqt][ipow][0] = CLSab(powe,comb,model)
						loggingInfo("\t\t\tCalculating the LSab term...done",verbose=RunSettings['vInfo'])
						if RunSettings['Two-Loop'] :
							Translated[mqt][ipow][0] = CLbar2Sab(powe,comb,model)
							loggingInfo("\t\t\tCalculating the Lbar2Sab term...done",verbose=RunSettings['vInfo'])
							Translated[mqt][ipow][0] = CL2gab(powe,comb,model)
							loggingInfo("\t\t\tCalculating the L2gab term...done",verbose=RunSettings['vInfo'])
							Translated[mqt][ipow][0] = CY2Fmab(powe,comb,model)
							loggingInfo("\t\t\tCalculating the Y2Fmab term...done",verbose=RunSettings['vInfo'])
							Translated[mqt][ipow][0] = CHSab(powe,comb,model)
							loggingInfo("\t\t\tCalculating the HSab term...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\tCalculating the HFab term...",verbose=RunSettings['vInfo'])
							Translated[mqt][ipow][0] = CHFab(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
					if powe[1] == 4 :
						assert RunSettings['Two-Loop'] 
						Translated[mqt][ipow][0] = CLSabg4(powe,comb,model)
						loggingInfo("\t\t\tCalculating the LSabg4 term...done",verbose=RunSettings['vInfo'])
						Translated[mqt][ipow][0] = CLSSab(powe,comb,model)
						loggingInfo("\t\t\tCalculating the LSSab term...done",verbose=RunSettings['vInfo'])
						Translated[mqt][ipow][0] = CAlab(powe,comb,model)
						loggingInfo("\t\t\tCalculating the Alab term...done",verbose=RunSettings['vInfo'])
						Translated[mqt][ipow][0] = CAbarlab(powe,comb,model)
						loggingInfo("\t\t\tCalculating the Abarlab term...done",verbose=RunSettings['vInfo'])
						loggingInfo("\t\t\tCalculating the BYab and BbarYab term...",verbose=RunSettings['vInfo'])
						Translated[mqt][ipow][0] = CBYabBbarYab(powe,comb,model)
						loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
				Translated[mqt] = CompileScalar(Translated,mqt,comb,model,RunSettings['Weyl'])
	elif RGE == 'FermionMass' :
		set_globalsFM(model)
		if model.FMToCalculate == {} :
			loggingCritical("WARNING, no Fermion mass term defined in the lagrangian",verbose=RunSettings['vCritical'])
		else :
			for mf,valm in model.FMToCalculate.items():
				loggingInfo("\t\tFermion mass calculation started for parameter {}...".format(mf),verbose=RunSettings['vInfo'])
				Translated[mf] = LocalRGE.expand()
				#separation of the different powers of g 
				Translated[mf] = [Translated[mf].subs(g,0),Translated[mf].coeff(g),Translated[mf].coeff(g**2),Translated[mf].coeff(g**3),Translated[mf].coeff(g**4),Translated[mf].coeff(g**5),Translated[mf].coeff(g**6)]
				#elimination of the component that are equals to zero 
				Translated[mf] = [[elt,ilt] for ilt,elt in enumerate(Translated[mf]) if elt != 0]
				###############################################################################
				#FOR EACH y i.e. yukawa we have to identify a couple scalar,f1,f2 that gives the yukawa
				comb = model.FMToCalculate[mf][-1]
				###############################################################################
				for ipow,powe in enumerate(Translated[mf]):
					if powe[1] == 0 :
						Translated[mf][ipow][0] = CYukFermionMassI(powe,comb,model)
						loggingInfo('\t\t\tCalculating the YukFermionMassI term ...done',verbose=RunSettings['vInfo'])
						if RunSettings['Two-Loop']:
							loggingInfo('\t\t\tCalculating the YukFermionMassII term ...',verbose=RunSettings['vInfo'])
							Translated[mf][ipow][0] = CYukFermionMassII(powe,comb,model)
							loggingInfo('\t\t\t\t\t...done',verbose=RunSettings['vInfo'])
					if powe[1] == 2 :
						Translated[mf][ipow][0] = CYukGaugeFermionMass(powe,comb,model)
						loggingInfo('\t\t\tCalculating the YukGaugeFermionMass term ...done',verbose=RunSettings['vInfo'])
						if RunSettings['Two-Loop']:
							loggingInfo('\t\t\tCalculating the YukGaugeFermionMass term ...',verbose=RunSettings['vInfo'])
							Translated[mf][ipow][0] = CYukGaugeFermionMassIIg2(powe,comb,model)
							loggingInfo('\t\t\t\t\t...done',verbose=RunSettings['vInfo'])
					if powe[1] == 4 :
						assert RunSettings['Two-Loop']
						loggingInfo('\t\t\tCalculating the YukGaugeFermionMass term ...',verbose=RunSettings['vInfo'])
						Translated[mf][ipow][0] = CYukGaugeFermionMassIIg4(powe,comb,model)
						loggingInfo('\t\t\t\t\t...done',verbose=RunSettings['vInfo'])
				Translated[mf] = CompileFM(Translated,mf,comb,model,RunSettings['Weyl'])
				loggingInfo('\t\t Compiling the results for the Yukawa...done',verbose=RunSettings['vInfo'])
	elif RGE == 'Trilinear' :
		set_globalsTri(model)
		if model.TriToCalculate == {} :
			loggingCritical("WARNING, no Trilinear term defined in the lagrangian",verbose=RunSettings['vCritical'])
		else :
			for hf,valh in model.TriToCalculate.items():
				loggingInfo('\t\tTrilinear term calculation, for parameter {}...\n'.format(hf),verbose=RunSettings['vInfo'])
				Translated[hf] = LocalRGE.expand()
				#separation of the different powers of g 
				Translated[hf] = [Translated[hf].subs(g,0),Translated[hf].coeff(g),Translated[hf].coeff(g**2),Translated[hf].coeff(g**3),Translated[hf].coeff(g**4),Translated[hf].coeff(g**5),Translated[hf].coeff(g**6)]
				#elimination of the component that are equals to zero 
				Translated[hf] = [[elt,ilt] for ilt,elt in enumerate(Translated[hf]) if elt != 0]
				#we need only one term to calculate the evolution of each hefg term let's take the first one in the list
				##############################################################
				comb = model.TriToCalculate[hf][-1]  # Choice only one calculated
				##############################################################
				for ipow,powe in enumerate(Translated[hf]):
					if powe[1] == 0 :
						loggingInfo("\t\t\t Calculating the L2abc term ...",verbose=RunSettings['vInfo'])
						Translated[hf][ipow][0] = CL2abc(powe,comb,model)
						loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
						loggingInfo("\t\t\t Calculating the Habc terms ...",verbose=RunSettings['vInfo'])
						Translated[hf][ipow][0] = CHabc(powe,comb,model)
						loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
						Translated[hf][ipow][0] = CLYabc(powe,comb,model)
						loggingInfo("\t\t\t Calculating the Y2(k) terms for k in a,b,c ...done",verbose=RunSettings['vInfo'])
						if RunSettings['Two-Loop'] :
							loggingInfo("\t\t\t Calculating the L2habc terms ...",verbose=RunSettings['vInfo'])
							Translated[hf][ipow][0] = CL2habc(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the Lbar3abcd terms ...",verbose=RunSettings['vInfo'])
							Translated[hf][ipow][0] = CLbar3abc(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the Lbar2Yabcd terms ...",verbose=RunSettings['vInfo'])
							Translated[hf][ipow][0] = CLbar2Yabc(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the Hbarlmabc terms ...",verbose=RunSettings['vInfo'])
							Translated[hf][ipow][0] = CHbarlmabc(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the Hbarhabc terms ...",verbose=RunSettings['vInfo'])
							Translated[hf][ipow][0] = CHbarhabc(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the Hbar2habc terms ...",verbose=RunSettings['vInfo'])
							Translated[hf][ipow][0] = CHbar2habc(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the H2habc terms ...",verbose=RunSettings['vInfo'])
							Translated[hf][ipow][0] = CH2habc(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the HYabc, HbarYabc and H3abc terms ...",verbose=RunSettings['vInfo'])
							Translated[hf][ipow][0] = CHYabcHbarYabcH3abc(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
					if powe[1] == 2 :
						Translated[hf][ipow][0] = CLSabc(powe,comb,model) 
						loggingInfo('\t\t\t Calculating LSabc term...done',verbose=RunSettings['vInfo'])
						if RunSettings['Two-Loop'] : 
							loggingInfo("\t\t\t Calculating the Lbar2Sabc terms ...",verbose=RunSettings['vInfo'])
							Translated[hf][ipow][0] = CLbar2Sabc(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the L2gabc terms ...",verbose=RunSettings['vInfo'])
							Translated[hf][ipow][0] = CL2gabc(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the Y2Fhabc terms ...",verbose=RunSettings['vInfo'])
							Translated[hf][ipow][0] = CY2Fhabc(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the HSabc terms ...",verbose=RunSettings['vInfo'])
							Translated[hf][ipow][0] = CHSabc(powe,comb,model)
							loggingInfo("\t\t\t\t\t ...done",verbose=RunSettings['vInfo'])
							loggingInfo("\t\t\t Calculating the HFabc terms ...",verbose=RunSettings['vInfo'])
							Translated[hf][ipow][0] = CHFabc(powe,comb,model)
							loggingInfo("\t\t\t\t\t...done",verbose=RunSettings['vInfo'])
					if powe[1] == 4 :
						assert RunSettings['Two-Loop']
						loggingInfo('\t\t\t Calculating g4LSabc term ...',verbose=RunSettings['vInfo'])
						Translated[hf][ipow][0] = Cg4LSabc(powe,comb,model) 
						loggingInfo('\t\t\t\t\t ...done',verbose=RunSettings['vInfo'])
						loggingInfo('\t\t\t Calculating LSSabc term ...',verbose=RunSettings['vInfo'])
						Translated[hf][ipow][0] = CLSSabc(powe,comb,model) 
						loggingInfo('\t\t\t\t\t ...done',verbose=RunSettings['vInfo'])
						loggingInfo('\t\t\t Calculating Alabc term ...',verbose=RunSettings['vInfo'])
						Translated[hf][ipow][0] = CAlabc(powe,comb,model) 
						loggingInfo('\t\t\t\t\t ...done',verbose=RunSettings['vInfo'])
						loggingInfo('\t\t\t Calculating Abarlabc...',verbose=RunSettings['vInfo'])
						Translated[hf][ipow][0] = CAbarlabc(powe,comb,model) 
						loggingInfo('\t\t\t\t\t ...done\n',verbose=RunSettings['vInfo'])
						loggingInfo('\t\t\t Calculating BYabc and BbarYabc...',verbose=RunSettings['vInfo'])
						Translated[hf][ipow][0] = CBYabcBbarYabc(powe,comb,model)
						loggingInfo('\t\t\t\t\t ...done\n',verbose=RunSettings['vInfo'])
				Translated[hf] = CompileTri(Translated,hf,comb,model,RunSettings['Weyl'])
				loggingInfo("\t\t\tCompiling the results for the trilinear terms",verbose = RunSettings['vInfo'])
	return Translated
